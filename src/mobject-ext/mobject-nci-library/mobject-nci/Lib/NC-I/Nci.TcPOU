<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Nci" Id="{f8cebd7c-fc9e-4bf6-b3ff-461adbfedacc}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
FUNCTION_BLOCK Nci EXTENDS CyclicInstance IMPLEMENTS I_Nci
VAR
	_nciPlc : NciPlc;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Configuration" Id="{64e2e5db-49fe-436d-9103-fcc72122f9b7}" />
    <Folder Name="Internal Properties" Id="{157f8ea5-8373-4dfe-9910-0a43152f11e5}" />
    <Folder Name="Methods" Id="{25adcca2-5d67-4960-a037-73512035c4aa}" />
    <Folder Name="Properties" Id="{5da2c792-bd4d-40c2-8670-e6000f20337d}" />
    <Property Name="_InternalNciPlcRef" Id="{22d49991-15d3-421c-a941-a47a723b9637}" FolderPath="Internal Properties\">
      <Declaration><![CDATA[PROPERTY _InternalNciPlcRef : REFERENCE TO NciPlc]]></Declaration>
      <Get Name="Get" Id="{779565a3-f0cd-45dc-94f9-cd3182069f1d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_InternalNciPlcRef REF= _nciPlc;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="AddAxisToGroup" Id="{1ab094d4-4928-4a3d-bd75-9ccaa64be078}" FolderPath="Configuration\">
      <Declaration><![CDATA[METHOD AddAxisToGroup
VAR_INPUT
	axis : I_Axis;
	index : UDINT;
	timeout : TIME;
	feedback : REFERENCE TO I_CommandFeedback;
END_VAR
VAR_INST
	pCmd : POINTER TO AddAxisToGroupCommand;
END_VAR
VAR
	_axis : I_Axis;
	_index : UDINT;
	_timeout : TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_axis := axis;
_index := index;
_timeout := timeout;

pCmd := __NEW(AddAxisToGroupCommand(
	nci := THIS^,
	axis := _axis,
	index := _index,
	timeout := _timeout
));

(*
This doesn't work hence the horrible hack with intermediate values

pCmd := __NEW(AddAxisToGroupCommand(
	nci := THIS^,
	axis := axis,
	index := index,
	timeout := timeout
));
*)

pCmd^.Execute(feedback).ThenRelease();]]></ST>
      </Implementation>
    </Method>
    <Property Name="BlockNumber" Id="{92b7dfaf-6c64-4bec-af95-15d16a701905}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY BlockNumber : UDINT]]></Declaration>
      <Get Name="Get" Id="{834fa829-7701-4239-b48a-ed882f001515}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[BlockNumber := ItpGetBlockNumber(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="BuildXYGroup" Id="{2084a74a-9894-4095-a05c-b558a62448bd}" FolderPath="Configuration\">
      <Declaration><![CDATA[METHOD BuildXYGroup
VAR_INPUT
	xAxis : I_Axis;
	yAxis : I_Axis;
	timeout : TIME;
	feedback : REFERENCE TO I_CommandFeedback;
END_VAR
VAR
	null : I_Axis;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[BuildXYZGroup(xAxis, yAxis, null, timeout, feedback);]]></ST>
      </Implementation>
    </Method>
    <Method Name="BuildXYZGroup" Id="{7ce7ecfb-d8a2-44cd-86f8-2103482bada6}" FolderPath="Configuration\">
      <Declaration><![CDATA[METHOD BuildXYZGroup
VAR_INPUT
	xAxis : I_Axis;
	yAxis : I_Axis;
	zAxis : I_Axis;
	timeout : TIME;
	feedback : REFERENCE TO I_CommandFeedback;
END_VAR
VAR_INST
	pCmd : POINTER TO BuildXYZGroupCommand;
END_VAR
VAR
	_xAxis : I_Axis;
	_yAxis : I_Axis;
	_zAxis : I_Axis;
	_timeout : TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_xAxis := xAxis;
_yAxis := yAxis;
_zAxis := zAxis;
_timeout := timeout;

pCmd := __NEW(BuildXYZGroupCommand(
	nci := THIS^,
	xAxis := _xAxis,
	yAxis := _yAxis,
	zAxis := _zAxis,
	timeout := _timeout
));

(*
This doesn't work hence the horrible hack with intermediate values

pCmd := __NEW(BuildXYZGroupCommand(
	nci := THIS^,
	xAxis := xAxis,
	yAxis := yAxis,
	zAxis := zAxis,
	timeout := commandTimeout
));
*)

pCmd^.Execute(feedback).ThenRelease();]]></ST>
      </Implementation>
    </Method>
    <Property Name="ChannelId" Id="{34a0a44b-2b1b-4119-a41a-9885bdb3a5b3}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ChannelId : UINT]]></Declaration>
      <Get Name="Get" Id="{2c6b50fa-e063-45bf-a35f-5d77165c7b4c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ChannelId := ItpGetChannelId(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ChannelType" Id="{f1398c1a-cd7b-48a7-a865-565888ee9f42}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ChannelType : ChannelType]]></Declaration>
      <Get Name="Get" Id="{4ec794f3-f5d0-47c4-aa96-b2c320f82363}">
        <Declaration><![CDATA[VAR
	inter : INT;
	pInter : POINTER TO ChannelType;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Don't know how to do the type conversion with NCIChannelType being strict
inter := ItpGetChannelType(THIS^._nciPlc.nciToPlc);
pInter := ADR(inter);
ChannelType := pInter^;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CyclicCall" Id="{4ede40d1-7050-4f2d-bfeb-a81bf4477046}">
      <Declaration><![CDATA[METHOD  CyclicCall]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="ErrorId" Id="{90a95cf4-1833-40d0-b848-d1e1629d9477}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ErrorId : UDINT]]></Declaration>
      <Get Name="Get" Id="{efc9fcf3-a6c2-4566-9265-8dcbe7a5e066}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorId := ItpGetError(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetGroupAxisIds" Id="{aa1d7dc3-9a02-4f97-9cb7-85dbfd4aa6b9}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD GetGroupAxisIds : DWORD
VAR_IN_OUT
	axisIds : ARRAY[1..8] OF DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetGroupAxisIds := ItpGetGroupAxisIds(axisIds, THIS^._nciPlc.nciToPlc);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetOverride" Id="{a0929981-6171-43dd-957d-687fe4dc1a5d}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD GetOverride : LREAL]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetOverride := ItpGetOverridePercent(THIS^._nciPlc.plcToNci);]]></ST>
      </Implementation>
    </Method>
    <Property Name="GroupId" Id="{93889c91-2c81-4f58-8ef3-e41fbc76ada6}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY GroupId : UDINT]]></Declaration>
      <Get Name="Get" Id="{cc900832-7371-46eb-af34-daefcdfde3f2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[GroupId := ItpGetGroupId(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HandshakeableMFunction" Id="{a2fc5474-1a7f-403a-b555-ae5a827e7fbd}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY HandshakeableMFunction : INT]]></Declaration>
      <Get Name="Get" Id="{e43b6f61-6f70-454d-88ea-25be705d3f23}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[HandshakeableMFunction := ItpGetHskMFunc(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HasError" Id="{aadaec39-bf03-4107-a261-91154fac9f05}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY HasError : BOOL]]></Declaration>
      <Get Name="Get" Id="{1bc99659-cc6c-4782-9a53-06f9bb48a795}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[HasError := ItpHasError(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HParam" Id="{a85344b2-d8cc-441b-9fcb-0c3e51d58f2d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY HParam : DINT]]></Declaration>
      <Get Name="Get" Id="{9d73e091-2810-4e52-b9d9-9a704a64cd9a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[HParam := ItpGetHParam(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InterpreterState" Id="{d54ce60d-29f4-4ea2-92ca-5eb3838c56b5}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY InterpreterState : UDINT]]></Declaration>
      <Get Name="Get" Id="{92dc3f6c-4ce0-4483-a555-8cb59181905b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[InterpreterState := ItpGetStateInterpreter(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsEstop" Id="{184949ff-2e4b-459c-b498-ccae1cd0ceb6}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY IsEstop : BOOL]]></Declaration>
      <Get Name="Get" Id="{8635629e-2183-4a4f-95cd-335bdd2b21c3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsEstop := ItpIsEStopEx(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IsFastMFunctionPresent" Id="{544f6876-a9b1-4ab7-9018-fed31e31baab}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD IsFastMFunctionPresent : BOOL
VAR_INPUT
	functionNumber : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsFastMFunctionPresent := ItpIsFastMFunc(functionNumber, THIS^._nciPlc.nciToPlc);]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsHandshakeableMFunctionPresent" Id="{cb5e966b-463a-49f2-83fa-9e9198308307}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD IsHandshakeableMFunctionPresent : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsHandshakeableMFunctionPresent := ItpIsHskMFunc(THIS^._nciPlc.nciToPlc);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadCyclicLRealParameter" Id="{c627ac3e-baa3-4b6d-9895-618922fc341d}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ReadCyclicLRealParameter : LREAL
VAR_INPUT
	parameterNumber : UINT(1..4);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE parameterNumber OF
	1: ReadCyclicLRealParameter := ItpReadCyclicLRealParam1(THIS^._nciPlc.nciToPlc);
	2: ReadCyclicLRealParameter := ItpReadCyclicLRealParam2(THIS^._nciPlc.nciToPlc);
	3: ReadCyclicLRealParameter := ItpReadCyclicLRealParam3(THIS^._nciPlc.nciToPlc);
	4: ReadCyclicLRealParameter := ItpReadCyclicLRealParam4(THIS^._nciPlc.nciToPlc);
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadCyclicUdintParameter" Id="{e53e0960-4a6b-4031-a73c-d6a592bf35ba}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ReadCyclicUdintParameter : UDINT
VAR_INPUT
	parameterNumber : UINT(1..4);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE parameterNumber OF
	1: ReadCyclicUdintParameter := ItpReadCyclicUdintParam1(THIS^._nciPlc.nciToPlc);
	2: ReadCyclicUdintParameter := ItpReadCyclicUdintParam2(THIS^._nciPlc.nciToPlc);
	3: ReadCyclicUdintParameter := ItpReadCyclicUdintParam3(THIS^._nciPlc.nciToPlc);
	4: ReadCyclicUdintParameter := ItpReadCyclicUdintParam4(THIS^._nciPlc.nciToPlc);
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReleaseAxis" Id="{3f1e7a0d-8dd3-46c7-b807-bbf87effe4df}" FolderPath="Configuration\">
      <Declaration><![CDATA[METHOD ReleaseAxis
VAR_INPUT
	axis : I_Axis;
	timeout : TIME;
	feedback : REFERENCE TO I_CommandFeedback;
END_VAR
VAR_INST
	pCmd : POINTER TO ReleaseAxisCommand;
END_VAR
VAR
	_axis : I_Axis;
	_timeout : TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_axis := axis;
_timeout := timeout;

pCmd := __NEW(ReleaseAxisCommand(
	axis := _axis,
	timeout := _timeout
));

(*
This doesn't work hence the horrible hack with intermediate values

pCmd := __NEW(ReleaseAxisCommand(
	axis := axis,
	timeout := timeout
));
*)
pCmd^.Execute(feedback).ThenRelease();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetGroup" Id="{982954cc-7809-4e10-9847-26a8b559aff9}" FolderPath="Configuration\">
      <Declaration><![CDATA[METHOD ResetGroup
VAR_INPUT
	timeout : TIME;
	feedback : REFERENCE TO I_CommandFeedback;
END_VAR
VAR_INST
	pCmd : POINTER TO ResetGroupCommand;
END_VAR
VAR
	_timeout : TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_timeout := timeout;

pCmd := __NEW(ResetGroupCommand(
	nci := THIS^,
	timeout := _timeout
));

(*
This doesn't work hence the horrible hack with intermediate values

pCmd := __NEW(ResetGroupCommand(
	nci := THIS^,
	timeout := timeout
));
*)

pCmd^.Execute(feedback).ThenRelease();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetOverride" Id="{a0866dab-b495-41bf-b5ac-136f30b3de64}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetOverride : BOOL
VAR_INPUT
	value : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetOverride := ItpSetOverridePercent(value, THIS^._nciPlc.plcToNci);]]></ST>
      </Implementation>
    </Method>
    <Property Name="SetPathVelocity" Id="{5ce7e9e2-0f7d-4aca-b58b-c1ee3d559772}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY SetPathVelocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{b0cc698d-25e7-4407-9d0f-8707d8bbacd4}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[SetPathVelocity := ItpGetSetPathVelocity(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="SParam" Id="{bc3a4f49-fc7a-46b8-969a-abbbb9aceb9b}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY SParam : UINT]]></Declaration>
      <Get Name="Get" Id="{bb9824c6-09f5-4622-be7b-e2a380719954}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[SParam := ItpGetSParam(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TParam" Id="{7f42a95f-0912-40d8-a9c5-0689ed9fd19a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TParam : UINT]]></Declaration>
      <Get Name="Get" Id="{98dab522-f2d4-4aa1-9c14-2c42ec76753e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[TParam := ItpGetTParam(THIS^._nciPlc.nciToPlc);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>