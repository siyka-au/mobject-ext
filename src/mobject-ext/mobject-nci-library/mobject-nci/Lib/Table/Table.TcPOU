<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Table" Id="{d72f561e-3b34-441b-a7b3-5420445ca981}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Table IMPLEMENTS I_Table
VAR
	_fb : FB_NciFeedTablePreparation;
	_table : ST_NciFeedGroupTable;
	
	_stopped : STRING;
	_errorId : UDINT;
	_filledRows : INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="_InternalTable" Id="{6e42fe52-2f52-4ea1-a312-eed20a413ec1}">
      <Declaration><![CDATA[PROPERTY _InternalTable : REFERENCE TO Tc2_PlcInterpolation.ST_NciFeedGroupTable]]></Declaration>
      <Get Name="Get" Id="{65922be4-8589-4486-ab61-891867cff2ac}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_InternalTable REF= _table;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="AddAxisDynamics" Id="{cb10ca90-9b31-49ed-8969-e2eda37356ad}">
      <Declaration><![CDATA[METHOD AddAxisDynamics : BOOL
VAR_INPUT
	displayIndex : UDINT;
	axis : mobject_motion.I_Axis;
	acceleration : LREAL(0.000001-99999999);
	deceleration : LREAL(0.000001-99999999);
	jerk : LREAL(0.000001-99999999);
END_VAR
VAR
	entry : ST_NciAxisDynamics;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.nAxis := axis.AxisId;
entry.fAcc := acceleration;
entry.fDec := deceleration;
entry.fJerk := jerk;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeAxisDynamics,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddAxisDynamics := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddBaseFrame" Id="{0d5624ff-7c0f-4c8a-872f-d4aad0556463}">
      <Declaration><![CDATA[METHOD AddBaseFrame : BOOL
VAR_INPUT
	displayIndex : UDINT;
	shiftX : LREAL;
	shiftY : LREAL;
	shiftZ : LREAL;
	rotationX : LREAL;
	rotationY : LREAL;
	rotationZ : LREAL;
	shiftQ1 : LREAL;
	shiftQ2 : LREAL;
	shiftQ3 : LREAL;
	shiftQ4 : LREAL;
	shiftQ5 : LREAL;
END_VAR
VAR
	entry : ST_NciBaseFrame;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.fShiftX := shiftX;
entry.fShiftY := shiftY;
entry.fShiftZ := shiftZ;
entry.fRotX := rotationX;
entry.fRotY := rotationY;
entry.fRotZ := rotationZ;
entry.fShiftQ1 := shiftQ1;
entry.fShiftQ2 := shiftQ2;
entry.fShiftQ3 := shiftQ3;
entry.fShiftQ4 := shiftQ4;
entry.fShiftQ5 := shiftQ5;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeBaseFrame,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddBaseFrame := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddBaseFrame3D" Id="{d5c1335c-d06f-42bc-a6c7-e07f11c8644e}">
      <Declaration><![CDATA[METHOD AddBaseFrame3D : BOOL
VAR_INPUT
	displayIndex : UDINT;
	shiftX : LREAL;
	shiftY : LREAL;
	shiftZ : LREAL;
	rotationX : LREAL;
	rotationY : LREAL;
	rotationZ : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddBaseFrame3D := AddBaseFrame(
	displayIndex,
	shiftX, shiftY, shiftZ,
	rotationX, rotationY, rotationZ,
	0, 0, 0, 0, 0
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddBezier3rdOrder" Id="{8b81eae7-4416-4b63-9fc8-9f2153199cbd}">
      <Declaration><![CDATA[METHOD AddBezier3rdOrder : BOOL
VAR_INPUT
	displayIndex : UDINT;
	controlPoint1X : LREAL;
	controlPoint1Y : LREAL;
	controlPoint1Z : LREAL;
	controlPoint2X : LREAL;
	controlPoint2Y : LREAL;
	controlPoint2Z : LREAL;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	endPositionQ1 : LREAL;
	endPositionQ2 : LREAL;
	endPositionQ3 : LREAL;
	endPositionQ4 : LREAL;
	endPositionQ5 : LREAL;
	velocity : LREAL(0.000001-99999999);
	accurateStop : BOOL; // velocity at end == 0
END_VAR
VAR
	entry : ST_NciGeoBezier3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.fControlPoint1X := controlPoint1X;
entry.fControlPoint1Y := controlPoint1Y;
entry.fControlPoint1Z := controlPoint1Z;
entry.fControlPoint2X := controlPoint2X;
entry.fControlPoint2Y := controlPoint2Y;
entry.fControlPoint2Z := controlPoint2Z;
entry.fEndPosX := endPositionX;
entry.fEndPosY := endPositionY;
entry.fEndPosZ := endPositionZ;
entry.fEndPosQ1 := endPositionQ1;
entry.fEndPosQ2 := endPositionQ2;
entry.fEndPosQ3 := endPositionQ3;
entry.fEndPosQ4 := endPositionQ4;
entry.fEndPosQ5 := endPositionQ5;
entry.fVelo := velocity;
entry.bAccurateStop := accurateStop;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeGeoBezier3,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddBezier3rdOrder := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddBezier3rdOrder3D" Id="{f464e8de-c3fe-426a-b577-1f4a3c66e77d}">
      <Declaration><![CDATA[METHOD AddBezier3rdOrder3D : BOOL
VAR_INPUT
	displayIndex : UDINT;
	controlPoint1X : LREAL;
	controlPoint1Y : LREAL;
	controlPoint1Z : LREAL;
	controlPoint2X : LREAL;
	controlPoint2Y : LREAL;
	controlPoint2Z : LREAL;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	velocity : LREAL(0.000001-99999999);
	accurateStop : BOOL; // velocity at end == 0
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddBezier3rdOrder3D := AddBezier3rdOrder(
	displayIndex,
	controlPoint1X, controlPoint1Y, controlPoint1Z,
	controlPoint2X, controlPoint2Y, controlPoint2Z,
	endPositionX, endPositionY, endPositionZ,
	0, 0, 0, 0, 0,
	velocity,
	accurateStop
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddBezier5thOrder" Id="{3dc48577-66e1-4a29-8a33-c5d965e35590}">
      <Declaration><![CDATA[METHOD AddBezier5thOrder : BOOL
VAR_INPUT
	displayIndex : UDINT;
	controlPoint1X : LREAL;
	controlPoint1Y : LREAL;
	controlPoint1Z : LREAL;
	controlPoint2X : LREAL;
	controlPoint2Y : LREAL;
	controlPoint2Z : LREAL;
	controlPoint3X : LREAL;
	controlPoint3Y : LREAL;
	controlPoint3Z : LREAL;
	controlPoint4X : LREAL;
	controlPoint4Y : LREAL;
	controlPoint4Z : LREAL;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	endPositionQ1 : LREAL;
	endPositionQ2 : LREAL;
	endPositionQ3 : LREAL;
	endPositionQ4 : LREAL;
	endPositionQ5 : LREAL;
	velocity : LREAL(0.000001-99999999);
	accurateStop : BOOL; // velocity at end == 0
END_VAR
VAR
	entry : ST_NciGeoBezier5;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.fControlPoint1X := controlPoint1X;
entry.fControlPoint1Y := controlPoint1Y;
entry.fControlPoint1Z := controlPoint1Z;
entry.fControlPoint2X := controlPoint2X;
entry.fControlPoint2Y := controlPoint2Y;
entry.fControlPoint2Z := controlPoint2Z;
entry.fControlPoint3X := controlPoint3X;
entry.fControlPoint3Y := controlPoint3Y;
entry.fControlPoint3Z := controlPoint3Z;
entry.fControlPoint4X := controlPoint4X;
entry.fControlPoint4Y := controlPoint4Y;
entry.fControlPoint4Z := controlPoint4Z;
entry.fEndPosX := endPositionX;
entry.fEndPosY := endPositionY;
entry.fEndPosZ := endPositionZ;
entry.fEndPosQ1 := endPositionQ1;
entry.fEndPosQ2 := endPositionQ2;
entry.fEndPosQ3 := endPositionQ3;
entry.fEndPosQ4 := endPositionQ4;
entry.fEndPosQ5 := endPositionQ5;
entry.fVelo := velocity;
entry.bAccurateStop := accurateStop;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeGeoBezier5,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddBezier5thOrder := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddBezier5thOrder3D" Id="{c09d39d8-9238-48a9-a7ca-2b2fc4d0ffd3}">
      <Declaration><![CDATA[METHOD AddBezier5thOrder3D : BOOL
VAR_INPUT
	displayIndex : UDINT;
	controlPoint1X : LREAL;
	controlPoint1Y : LREAL;
	controlPoint1Z : LREAL;
	controlPoint2X : LREAL;
	controlPoint2Y : LREAL;
	controlPoint2Z : LREAL;
	controlPoint3X : LREAL;
	controlPoint3Y : LREAL;
	controlPoint3Z : LREAL;
	controlPoint4X : LREAL;
	controlPoint4Y : LREAL;
	controlPoint4Z : LREAL;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	velocity : LREAL(0.000001-99999999);
	accurateStop : BOOL; // velocity at end == 0
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddBezier5thOrder3D := AddBezier5thOrder(
	displayIndex,
	controlPoint1X, controlPoint1Y, controlPoint1Z,
	controlPoint2X, controlPoint2Y, controlPoint2Z,
	controlPoint3X, controlPoint3Y, controlPoint3Z,
	controlPoint4X, controlPoint4Y, controlPoint4Z,
	endPositionX, endPositionY, endPositionZ,
	0, 0, 0, 0, 0,
	velocity,
	accurateStop
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddCircleCIP" Id="{61b641c2-04b3-49c8-b992-a794c1b89315}">
      <Declaration><![CDATA[METHOD AddCircleCIP : BOOL
VAR_INPUT
	displayIndex : UDINT;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	arcPointX : LREAL;
	arcPointY : LREAL;
	arcPointZ : LREAL;
	endPositionQ1 : LREAL;
	endPositionQ2 : LREAL;
	endPositionQ3 : LREAL;
	endPositionQ4 : LREAL;
	endPositionQ5 : LREAL;
	velocity : LREAL(0.000001-99999999);
	accurateStop : BOOL; // velocity at end == 0
END_VAR
VAR
	entry : ST_NciGeoCircleCIP;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.fEndPosX := endPositionX;
entry.fEndPosY := endPositionY;
entry.fEndPosZ := endPositionZ;
entry.fCIPPosX := arcPointX;
entry.fCIPPosY := arcPointY;
entry.fCIPPosZ := arcPointZ;
entry.fEndPosQ1 := endPositionQ1;
entry.fEndPosQ2 := endPositionQ2;
entry.fEndPosQ3 := endPositionQ3;
entry.fEndPosQ4 := endPositionQ4;
entry.fEndPosQ5 := endPositionQ5;
entry.fVelo := velocity;
entry.bAccurateStop := accurateStop;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeGeoCircleCIP,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddCircleCIP := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddCircleCIP3D" Id="{d3f7d603-0f33-4996-9a0a-8cc135df056b}">
      <Declaration><![CDATA[METHOD AddCircleCIP3D : BOOL
VAR_INPUT
	displayIndex : UDINT;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	arcPointX : LREAL;
	arcPointY : LREAL;
	arcPointZ : LREAL;
	velocity : LREAL(0.000001-99999999);
	accurateStop : BOOL; // velocity at end == 0
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddCircleCIP3D := AddCircleCIP(
	displayIndex,
	endPositionX, endPositionY, endPositionZ,
	arcPointX, arcPointY, arcPointZ,
	0, 0, 0, 0, 0,
	velocity,
	accurateStop
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddCircleOnPlane" Id="{1a6e5dc8-a619-44e4-9847-e56fc0e03d1c}">
      <Declaration><![CDATA[METHOD AddCircleOnPlane : BOOL
VAR_INPUT
	displayIndex : UDINT;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	centerX : LREAL;
	centerY : LREAL;
	centerZ : LREAL;
	endPositionQ1 : LREAL;
	endPositionQ2 : LREAL;
	endPositionQ3 : LREAL;
	endPositionQ4 : LREAL;
	endPositionQ5 : LREAL;
	plane : StandardPlane := StandardPlane.XY;
	clockwise : BOOL;	
	velocity : LREAL(0.000001-99999999);
	accurateStop : BOOL; // velocity at end == 0
END_VAR
VAR
	entry: ST_NciGeoCirclePlane;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.fEndPosX := endPositionX;
entry.fEndPosY := endPositionY;
entry.fEndPosZ := endPositionZ;
entry.fCenterX := centerX;
entry.fCenterY := centerY;
entry.fCenterZ := centerZ;
entry.fEndPosQ1 := endPositionQ1;
entry.fEndPosQ2 := endPositionQ2;
entry.fEndPosQ3 := endPositionQ3;
entry.fEndPosQ4 := endPositionQ4;
entry.fEndPosQ5 := endPositionQ5;
entry.nPlane := plane;
entry.bClockwise := clockwise;
entry.fVelo := velocity;
entry.bAccurateStop := accurateStop;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeGeoCirclePlane,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddCircleOnPlane := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddCircleOnPlane3D" Id="{eff398be-6b1a-4a23-bf71-ad5b6cf747aa}">
      <Declaration><![CDATA[METHOD AddCircleOnPlane3D : BOOL
VAR_INPUT
	displayIndex : UDINT;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	centerX : LREAL;
	centerY : LREAL;
	centerZ : LREAL;
	plane : StandardPlane := StandardPlane.XY;
	clockwise : BOOL;
	velocity : LREAL(0.000001-99999999);
	accurateStop : BOOL; // velocity at end == 0
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddCircleOnPlane3D := AddCircleOnPlane(
	displayIndex,
	endPositionX,
	endPositionY,
	endPositionZ,
	centerX ,
	centerY,
	centerZ,
	0, 0, 0, 0, 0,
	plane,
	clockwise,	
	velocity,
	accurateStop
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDwellTime" Id="{7193be9e-2c69-4747-bf6e-073314e2d3ba}">
      <Declaration><![CDATA[METHOD AddDwellTime : BOOL
VAR_INPUT
	displayIndex : UDINT;
	dwellTime : LREAL(0.000001-99999999); // seconds
END_VAR
VAR
	entry: ST_NciDwellTime;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.fDwellTime := dwellTime;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeDwellTime,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddDwellTime := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddFeedrateInterpolation" Id="{c114bbff-d155-4a4d-bbc5-540cbe9ba385}">
      <Declaration><![CDATA[METHOD AddFeedrateInterpolation : BOOL
VAR_INPUT
	displayIndex : UDINT;
	interpolationType : FeedrateInterpolation;
END_VAR
VAR
	entry : ST_NciFeedrateIpol;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.eFeedrateIpol := interpolationType;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeFeedrateIpol,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

 AddFeedrateInterpolation:= _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddLine" Id="{6348e06b-da15-4e18-a610-0391343d7f42}">
      <Declaration><![CDATA[METHOD AddLine : BOOL
VAR_INPUT
	displayIndex : UDINT;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	endPositionQ1 : LREAL;
	endPositionQ2 : LREAL;
	endPositionQ3 : LREAL;
	endPositionQ4 : LREAL;
	endPositionQ5 : LREAL;
	velocity : LREAL(0.000001-99999999);
	rapidTraverse : BOOL;
	accurateStop : BOOL; // velocity at end == 0
END_VAR
VAR
	entry : ST_NciGeoLine;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.fEndPosX := endPositionX;
entry.fEndPosY := endPositionY;
entry.fEndPosZ := endPositionZ;
entry.fEndPosQ1 := endPositionQ1;
entry.fEndPosQ2 := endPositionQ2;
entry.fEndPosQ3 := endPositionQ3;
entry.fEndPosQ4 := endPositionQ4;
entry.fEndPosQ5 := endPositionQ5;
entry.fVelo := velocity;
entry.bRapidTraverse := rapidTraverse;
entry.bAccurateStop := accurateStop;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeGeoLine,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddLine := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddLine3D" Id="{50d1f478-3e2c-4185-b761-337191fea1f0}">
      <Declaration><![CDATA[METHOD AddLine3D : BOOL
VAR_INPUT
	displayIndex : UDINT;
	endPositionX : LREAL;
	endPositionY : LREAL;
	endPositionZ : LREAL;
	velocity : LREAL(0.000001-99999999);
	rapidTraverse : BOOL;
	accurateStop : BOOL; // velocity at end == 0
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddLine3D := AddLine(
	displayIndex,
	endPositionX,
	endPositionY,
	endPositionZ,
	0, 0, 0, 0, 0,
	velocity,
	rapidTraverse,
	accurateStop
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddMFunctionWithHandshake" Id="{74e413df-d3fa-4b05-84bb-fa7114a06956}">
      <Declaration><![CDATA[METHOD AddMFunctionWithHandshake : BOOL
VAR_INPUT
	displayIndex : UDINT;
	functionNumber : INT(0..159);
END_VAR
VAR
	entry : ST_NciMFuncHsk;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.nMFunc := functionNumber;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeMFuncHsk,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

 AddMFunctionWithHandshake := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddPathDynamics" Id="{66dda6b1-30e2-4bb3-89c5-1860678057b3}">
      <Declaration><![CDATA[METHOD AddPathDynamics : BOOL
VAR_INPUT
	displayIndex : UDINT;
	acceleration : LREAL(0.000001-99999999);
	deceleration : LREAL(0.000001-99999999);
	jerk : LREAL(0.000001-99999999);
END_VAR
VAR
	entry : ST_NciPathDynamics;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nDisplayIndex := displayIndex;
entry.fAcc := acceleration;
entry.fDec := deceleration;
entry.fJerk := jerk;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypePathDynamics,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddPathDynamics := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddReference" Id="{761a7f52-18b0-4c2d-80ca-8155a04bac8a}">
      <Declaration><![CDATA[METHOD AddReference]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddStart" Id="{6309428f-0be3-4574-81ec-0699a4cfc530}">
      <Declaration><![CDATA[METHOD AddStart : BOOL
VAR_INPUT
	x : LREAL;
	y : LREAL;
	z : LREAL;
	q1 : LREAL;
	q2 : LREAL;
	q3 : LREAL;
	q4 : LREAL;
	q5 : LREAL;
END_VAR
VAR
	entry : ST_NciGeoStart;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.fPosX := x;
entry.fPosY := y;
entry.fPosZ := z;
entry.fPosQ1 := q1;
entry.fPosQ2 := q2;
entry.fPosQ3 := q3;
entry.fPosQ4 := q4;
entry.fPosQ5 := q5;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeGeoStart,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

AddStart := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddStart3D" Id="{bbce6483-1592-447e-b9ac-e3d4188a6065}">
      <Declaration><![CDATA[METHOD AddStart3D : BOOL
VAR_INPUT
	x : LREAL;
	y : LREAL;
	z : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddStart3D := AddStart(x, y, z, 0, 0, 0, 0, 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisableTangentialFollowing" Id="{6f96638a-245a-4c0c-a445-439685877486}">
      <Declaration><![CDATA[METHOD DisableTangentialFollowing : BOOL
VAR
	entry : ST_NciTangentialFollowingDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.bTangOn := FALSE;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeTfDesc,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

DisableTangentialFollowing := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisableVertexSmoothing" Id="{611ae959-1d4e-4566-a54f-e98db8bb9987}">
      <Declaration><![CDATA[METHOD DisableVertexSmoothing : BOOL
VAR_INPUT
	displayIndex : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[DisableVertexSmoothing := EnableVertexSmoothing(
	displayIndex,
	VertexSmoothingBlendingType.NONE,
	VertexSmoothingSubType.NONE,
	0
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableTangentialFollowing" Id="{92669109-6d83-47f4-bcbd-83f5e096629b}">
      <Declaration><![CDATA[METHOD EnableTangentialFollowing : BOOL
VAR_INPUT
	tangentialAxis : NciAxis; // axis used for tangential following
	pathAxis1 : NciAxis; // describing the plane e.g. x
	pathAxis2 : NciAxis; // e.g. y ==> g17, xy plane
	offset : LREAL; // geo tangent is 0 degree, counting is mathmatical positive
	criticalAngle : LREAL(0.000001-90);
	behaviour : TangentialFollowingBehaviour;
END_VAR
VAR
	entry : ST_NciTangentialFollowingDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.bTangOn := TRUE;
entry.nTangAxis := tangentialAxis;
entry.nPathAxis1 := pathAxis1;
entry.nPathAxis2 := pathAxis2;
entry.fOffset := offset;
entry.fCriticalAngle1 := criticalAngle;
entry.nTfBehavior := behaviour;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeTfDesc,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

EnableTangentialFollowing := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableVertexSmoothing" Id="{d88e06cd-4f1c-45b3-8db1-8bc610a2ed8a}">
      <Declaration><![CDATA[METHOD EnableVertexSmoothing : BOOL
VAR_INPUT
	displayIndex : UDINT;
	blendType : VertexSmoothingBlendingType;
	subType : VertexSmoothingSubType;
	radius : LREAL(0.000001-99999999);
END_VAR
VAR
	entry : ST_NciVertexSmoothing;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[entry.nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeVertexSmoothing;
entry.nDisplayIndex := displayIndex;
entry.nType := blendType;
entry.nSubtype :=	subType;
entry.fRadius :=	radius;

_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeVertexSmoothing,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

EnableVertexSmoothing := _fb.bError;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="End" Id="{a6ad11f4-9f4e-49b8-9412-8f9ada650c8c}">
      <Declaration><![CDATA[METHOD End : BOOL
VAR
	entry : ST_NciEndOfTables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_fb(
	stFeedGroupTable := _table,
	pEntry := ADR(entry),
	nEntryType := Tc2_PlcInterpolation.E_NciEntryType.E_NciEntryTypeEndOfTables,
	bResetTable := FALSE,
	bResetAll := FALSE,
	nFilledRows => _filledRows
);

End := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ErrorId" Id="{4b405865-ec5d-4b8a-b804-141550374fca}">
      <Declaration><![CDATA[PROPERTY ErrorId : UDINT]]></Declaration>
      <Get Name="Get" Id="{87530970-30d4-4096-8330-e7af92395c1f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorId := _fb.nErrorId;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="FilledRows" Id="{d5821768-f4b6-4dc5-80ab-f67bb2a855d9}">
      <Declaration><![CDATA[PROPERTY FilledRows : INT]]></Declaration>
      <Get Name="Get" Id="{9028ca8e-87c9-4b79-a448-67bb32a7f35f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[FilledRows := _filledRows;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HasError" Id="{6682315a-1a05-4751-b3fb-36564736c005}">
      <Declaration><![CDATA[PROPERTY HasError : BOOL]]></Declaration>
      <Get Name="Get" Id="{4e974622-92a5-4d80-b8c5-9a282ff814ce}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[HasError := _fb.bError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ResetAll" Id="{7ec568a6-d801-48dc-b132-28e48e98b69d}">
      <Declaration><![CDATA[METHOD ResetAll : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[_fb(
	stFeedGroupTable := _table,
	bResetAll := TRUE
);

ResetAll := _fb.bError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetTable" Id="{17814344-d6e3-4900-b492-8d2f6e943174}">
      <Declaration><![CDATA[METHOD ResetTable : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[_fb(
	stFeedGroupTable := _table,
	bResetTable := TRUE
);

ResetTable := _fb.bError;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>