<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Feeder" Id="{afa055f6-15fe-4e61-8d6b-20702e0efb2f}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
FUNCTION_BLOCK Feeder EXTENDS CyclicInstance IMPLEMENTS I_Feeder
VAR
	_nci : I_Nci;
	_fb : FB_NciFeedTable;
	_table : ST_NciFeedGroupTable;
	_execute : BOOL;
	_reset : BOOL;
	_feedDone : BOOL;
	_channelDone : BOOL;
	_feedBusy : BOOL;
	_resetBusy : BOOL;
	_error : BOOL;
	_errorId : UDINT;
	
	state : (IDLE, RESETTING, FEEDING, DONE, ERROR);
	command : (NONE, RESET, FEED);
	
	commandFeedback : I_CommandFeedbackReadWrite;
	commandHasCompleted : BOOL;
	disposeOnceComplete : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
	Beckhoff have put multiple functions into this function block that would
	normally be a few different function blocks. As such we emulate the
	I_Command behaviour internally as sharing a single function block across
	command instances seems a bit iffy.
*)]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{89091e83-73bf-47cc-8b96-a37cc1f49d7b}" />
    <Property Name="ChannelDone" Id="{5afb5868-f2a2-4372-8411-e438c1383ce3}">
      <Declaration><![CDATA[PROPERTY ChannelDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{b1dcd2b0-9787-41aa-9687-673de1e31402}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ChannelDone := _fb.bChannelDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearFeedback" Id="{b51b8aee-a087-4d73-baff-d23f4ea2131d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD ClearFeedback]]></Declaration>
      <Implementation>
        <ST><![CDATA[commandFeedback.Release();
commandFeedback := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompleteTheCommand" Id="{1d2a89c7-23cc-4f6a-be3a-76c9cf6751fa}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD CompleteTheCommand]]></Declaration>
      <Implementation>
        <ST><![CDATA[ClearFeedback();

IF disposeOnceComplete THEN
	// DisposeCommand();
END_IF

// OnExecuteComplete();

commandHasCompleted := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicCall" Id="{d6db967f-e96f-407c-8bd0-c8fd62de273e}">
      <Declaration><![CDATA[METHOD  CyclicCall]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE state OF
	IDLE:
		_fb(
			bExecute := FALSE,
			bReset := FALSE,
			stNciToPlc := _nci._InternalNciPlcRef.nciToPlc,
			stFeedGroupTable := _table,
		);
		
		CASE command OF
			RESET:
				state := RESETTING;
				command := NONE;
				commandFeedback.SetBusy();
			FEED:
				state := FEEDING;
				command := NONE;
				commandFeedback.SetBusy();
		END_CASE

	RESETTING:
		_fb(
			bExecute := FALSE,
			bReset := TRUE,
			stNciToPlc := _nci._InternalNciPlcRef.nciToPlc,
			stFeedGroupTable := _table,
		);
		
		IF NOT _fb.bResetBusy THEN		
			IF _fb.bError THEN
				state := ERROR;
			ELSE
				state := DONE;
			END_IF
		END_IF

	FEEDING:
		_fb(
			bExecute := TRUE,
			bReset := FALSE,
			stNciToPlc := _nci._InternalNciPlcRef.nciToPlc,
			stFeedGroupTable := _table,
		);
		
		IF NOT _fb.bFeedBusy THEN
			IF _fb.bError THEN
				state := ERROR;
			ELSIF _fb.bFeedingDone THEN
				state := DONE;
			END_IF
		END_IF
	
	DONE:
		IF commandFeedback <> 0 THEN
			commandFeedback.SetDone();
		END_IF
		state := IDLE;		
	ERROR:
		IF commandFeedback <> 0 THEN
			commandFeedback.SetError(_fb.nErrorId);
		END_IF
		state := IDLE;
ELSE
	state := IDLE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f7a3b709-36af-4cf3-8b00-72d02378a520}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	nci : I_Nci;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nci <> 0 THEN
	_nci := nci;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FeedTable" Id="{8476d02f-5c4f-4f23-9c8e-b99f09d1c9a8}">
      <Declaration><![CDATA[METHOD FeedTable
VAR_INPUT
	table : I_Table;
	feedback : REFERENCE TO I_CommandFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsAlreadyExecuting() THEN
	_table := table._InternalTable;
	command := FEED;
	SetupFeedback(feedback);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasCompleted" Id="{9b97fae2-ce70-46a3-baea-d3d06af15a51}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE HasCompleted : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF commandFeedback = 0 THEN
	HasCompleted := commandHasCompleted;
	RETURN;
END_IF

HasCompleted := NOT commandFeedback.Busy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsAlreadyExecuting" Id="{97fa980e-da7f-4a81-9761-2200ee61a9a9}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsAlreadyExecuting : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF commandFeedback = 0 THEN
	RETURN;
END_IF

IsAlreadyExecuting := commandFeedback.Busy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsStillBusyExecuting" Id="{27f675ee-029d-491b-8649-ed12ad487a98}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsStillBusyExecuting : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF commandFeedback = 0 THEN
	RETURN;
END_IF

IsStillBusyExecuting := commandFeedback.Busy AND NOT commandFeedback.Aborting;]]></ST>
      </Implementation>
    </Method>
    <Property Name="LogFeederEntries" Id="{f6e57a52-533d-4308-9a0e-66fb75df4f5b}">
      <Declaration><![CDATA[PROPERTY LogFeederEntries : BOOL]]></Declaration>
      <Get Name="Get" Id="{f17eb77f-9d66-4c30-b212-f445faa48830}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[LogFeederEntries := _fb.bLogFeederEntries;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{616289b1-a9a0-4937-9f75-c9a1e9efaf8c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fb.bLogFeederEntries := LogFeederEntries;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Reset" Id="{15b76a3e-649d-41c0-8436-e6992218e0a9}">
      <Declaration><![CDATA[METHOD Reset
VAR_INPUT
	feedback : REFERENCE TO I_CommandFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsAlreadyExecuting() THEN
	command := RESET;
	SetupFeedback(Feedback);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetupFeedback" Id="{307a438d-d424-4a14-bb33-75461029a1de}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD SetupFeedback : I_CommandFeedbackReadWrite
VAR_INPUT
	feedback : REFERENCE TO I_CommandFeedback;
END_VAR
VAR
	pFeedback : POINTER TO CommandFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF feedback <> 0 THEN 
	feedback.Release();
END_IF

IF IsAlreadyExecuting() THEN

	IF __ISVALIDREF(feedback) THEN
		feedback := commandFeedback;
		feedback.AddReference();
	END_IF
	
	RETURN;
END_IF

IF commandFeedback <> 0 THEN 
	commandFeedback.Release();
END_IF

pFeedback := __NEW(CommandFeedback);
commandFeedback := pFeedback^;

IF __ISVALIDREF(feedback) THEN
	feedback := commandFeedback;
	feedback.AddReference();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>